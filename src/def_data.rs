use def::blockages_rt::blockage::DefBlockage;

#[derive(Default)]
pub struct DefData {
    pub def_prop_def_type: char, // current type of the property
    pub ch: String,
    pub def_msg: String,
    pub def_token: String,
    pub uc_token: String,
    pub last: String,
    pub magic: String,
    pub next: String,
    pub pv_deftoken: String,
    pub row_name: String,
    pub shield_name: String,
    pub shift_buf: String,
    pub warning_msg: String,
    pub save_x: f64,
    pub save_y: f64,
    pub l_val: f64,
    pub r_val: f64,
    pub a_oxide: i32,
    pub assertion_warnings: i32,
    pub bit_is_keyword: i32,
    pub bits_num: i32,
    pub blockage_warnings: i32,
    pub by_is_keyword: i32,
    pub case_sensitive_warnings: i32,
    pub component_warnings: i32,
    pub constraint_warnings: i32,
    pub cover_is_keyword: i32,
    pub def_ignore_version: i32,
    pub def_invalid_char: i32,
    pub def_msg_cnt: i32,
    pub def_msg_printed: i32,
    pub def_print_tokens: i32,
    pub def_ret_val: i32,
    pub def_warnings: i32,
    pub default_cap_warnings: i32,
    pub do_is_keyword: i32,
    pub dumb_mode: i32,
    pub errors: i32,
    pub fill_warnings: i32,
    pub first_buffer: i32,
    pub fixed_is_keyword: i32,
    pub gcell_grid_warnings: i32,
    pub has_blk_layer_comp: i32,
    pub has_blk_layer_spac: i32,
    pub has_blk_layer_type_comp: i32,
    pub has_blk_place_comp: i32,
    pub has_blk_place_type_comp: i32,
    pub has_bus_bit: i32,
    pub has_des: i32,
    pub has_div_char: i32,
    pub has_do_step: i32,
    pub has_name_case: i32,
    pub has_opened_def_log_file: i32,
    pub has_port: i32,
    pub has_ver: i32,
    pub has_fatal_error: i32,
    pub io_timing_warnings: i32,
    pub input_level: i32,
    pub mask_is_keyword: i32,
    pub mustjoin_is_keyword: i32,
    pub names_case_sensitive: i32,
    pub need_npcbk: i32,
    pub need_snpcbk: i32,
    pub net_osnet: i32,
    pub new_is_keyword: i32,
    pub nl_token: i32,
    pub no_num: i32,
    pub non_default_warnings: i32,
    pub nondef_is_keyword: i32,
    pub ntokens: i32,
    pub orient_is_keyword: i32,
    pub pin_ext_warnings: i32,
    pub pin_warnings: i32,
    pub real_num: i32,
    pub rect_is_keyword: i32,
    pub reg_type_def: i32,
    pub region_warnings: i32,
    pub ring_place: i32,
    pub routed_is_keyword: i32,
    pub row_warnings: i32,
    pub snet_warnings: i32,
    pub scanchain_warnings: i32,
    pub sheild: i32,
    pub shift_buf_length: i32,
    pub special_wire_mask: i32,
    pub step_is_keyword: i32,
    pub styles_warnings: i32,
    pub track_warnings: i32,
    pub units_warnings: i32,
    pub version_warnings: i32,
    pub via_rule: i32,
    pub via_warnings: i32,
    pub virtual_is_keyword: i32,
    pub deftoken_length: i32,
    pub nlines: i64,

    pub specialwire_routestatus: String,
    pub specialwire_routestatusname: String,
    pub specialwire_shapetype: String,
    pub specialwire_shapetypename: String,
    pub version_num: f64,
    pub x_step: f64,
    pub y_step: f64,

    // pub path: DefPath,
    // pub prop: DefProp,
    // pub site: DefSite,
    // pub component: DefComponent,
    // pub component_mask_shift_layer: DefComponentMaskShiftLayer,
    // pub net: DefNet,
    // pub pin_cap: DefPinCap,
    // pub cannot_occupy: DefSite,
    // pub canplace: DefSite,
    // pub die_area: DefBox,
    // pub pin: DefPin,
    // pub row: DefRow,
    // pub track: DefTrack,
    // pub gcell_grid: DefGcellGrid,
    // pub via: DefVia,
    // pub region: DefRegion,
    // pub group: DefGroup,
    // pub assertion: Assertion,
    // pub scanchain: DefScanChain,
    // pub iotiming: DefIOTiming,
    // pub fpc: DefFPC,
    // pub timing_disable: DefTimingDisable,
    // pub partition: DefPartition,
    // pub pin_prop: DefPinProp,
    pub blockage: DefBlockage,
    pub slot: DefBlockage,
    // pub fill: DefFill,
    // pub non_default: DefNonDefault,
    // pub styles: DefStyles,
    // pub Geometries: DefGeometries,
    pub done_design: i32,
    pub need_path_data: i32,
    // pub subnet: DefSubnet,
}

impl DefData {
    pub fn check_errors(&mut self) -> bool {
        if self.errors > 20 {
            println!("Too many syntax errors have been reported!");
            self.errors = 0;
            return true;
        }
        return false;
    }
}
